library IEEE;
use IEEE.STD_LOGIC_1164.ALL;



entity fsm is
 port ( RESET: in STD_LOGIC;
        CLK: in STD_LOGIC;
        BUTTON1 : in STD_LOGIC;
        BUTTON2 : in STD_LOGIC;
        START : in STD_LOGIC;
        LIGHT: out STD_LOGIC_VECTOR (0 to 3));
end fsm;

architecture Behavioral of fsm is
    
    type STATES is (APAGADO, ESPERANDO, CORTO, LARGO);
    signal current_state: STATES := APAGADO;
    signal next_state: STATES;

begin
    state_register: process (RESET, CLK)
    begin
        if(RESET='0') THEN current_state<= APAGADO;
            elsif (CLK'event and CLK='1') then current_state<= next_state;
       end if;
  end process;

nextstate_decod: process(BUTTON1, BUTTON2, START, current_state)
begin
    next_state <= current_state;
        case current_state is
            when APAGADO => 
                 if START = '1' then
                    next_state <= ESPERANDO;
                 end if;
            when ESPERANDO => 
                  if BUTTON1 = '1' then 
                    next_state <= CORTO;
                  elsif BUTTON2 = '1'  then
                    next_state <= LARGO;
                  end if;
            when CORTO => 
                  if 
                  ---- temporizador de 10 segundos 
                  next_state <= APAGADO;
                  end if;
            when LARGO => 
                  if 
                  ---- temporizador de 20 segundos 
                  next_state <= APAGADO;
            end case;
            end process;
      
      output_decod: process (current_state)
      
      begin
      
        LIGHT <= (others => '0');
    case current_state is
        when APAGADO =>
        LIGHT(0) <= '1';
        when ESPERANDO => 
        LIGHT(1) <= '1';
        when CORTO =>
        LIGHT(2) <= '1';
        --durante 10 segundos
        when LARGO =>
        LIGHT(3) <= '1';
        ----durante 20 segundos
        when OTHERS => 
        LIGHT <= (OTHERS => '0');
     end case;
   end process;                     
end Behavioral;
